package com.yaps.petstore.server.domain;

import com.yaps.petstore.common.exception.CheckException;
import com.yaps.petstore.common.locator.ejb.ServiceLocator;
import com.yaps.petstore.server.util.persistence.AbstractDataAccessObject;
import com.yaps.petstore.server.util.uidgen.generator.UniqueIdGeneratorLocalHome;

import javax.ejb.EJBException;
import javax.ejb.EntityBean;
import javax.ejb.EntityContext;
import javax.ejb.RemoveException;

/**
 * Persistent object are DomainObjects that can persist their data into a persistent layer.
 * This class implements the Serializable interface. It defines methods to
 * create, remove, update and find values from a persistent layer. An object
 * can use these methods or overwrite them when needed. These methods delegate
 * the perssitent storage to the AbstractDataAccessObject class.
 *
 * @see AbstractDataAccessObject
 */
public abstract class PersistentObject extends DomainObject implements EntityBean {

    // ======================================
    // =             Attributes             =
    // ======================================
    protected EntityContext _entityContext;

    // ======================================
    // =           Business methods         =
    // ======================================
    /**
     * This method checks the integrity of the object data. Because this method is specific to
     * every class, it is abstract.
     *
     * @throws CheckException if data is invalid
     */
    public abstract void checkData() throws CheckException;

    /**
     * This method checks that the identifier is valid.
     *
     * @param id identifier to check
     * @throws CheckException if the id is invalid
     */
    protected void checkId(final String id) throws CheckException {
        if (id == null || "".equals(id)) {
            rollBack();
            throw new CheckException("Invalid id");
        }
    }

    /**
     * This method returns a unique identifer generated by the system. It is
     * mainly used for Orders, OrderLines, Address and CreditCard
     *
     * @param counterName name of the counter
     * @return a unique identifer
     */
    protected final String getUniqueId(final String counterName) {
        String id = "0";
        try {
            final UniqueIdGeneratorLocalHome home = (UniqueIdGeneratorLocalHome) new ServiceLocator().getLocalHome(UniqueIdGeneratorLocalHome.JNDI_NAME);
            id = home.create().getUniqueId(counterName);
        } catch (Exception e) {
            throw new EJBException(e);
        }
        return id;
    }

    protected void rollBack() {
        _entityContext.setRollbackOnly();
    }

    // ======================================
    // =         Getters and Setters        =
    // ======================================
    public abstract String getId();

    public abstract void setId(final String id);

    // ======================================
    // =            EJB callbacks           =
    // ======================================
    public void setEntityContext(EntityContext entityContext) throws EJBException {
        _entityContext = entityContext;
    }

    public void unsetEntityContext() throws EJBException {
        _entityContext = null;
    }

    public void ejbRemove() throws RemoveException, EJBException {
    }

    public void ejbActivate() throws EJBException {
    }

    public void ejbPassivate() throws EJBException {
    }

    public void ejbLoad() throws EJBException {
    }

    public void ejbStore() throws EJBException {
    }
}
